digraph dependencies {
rankdir = "LR";
subgraph clustersimple {
"logMissingTranslation(String,String)" [ color="#000000ff" ];
"logIoException(IOException,File)" [ color="#000000ff" ];
"processFiltered(File,List)" [ color="#ffff00ff" shape="trapezium" ];
"getPath(String)" [ color="#000000ff" shape="polygon" ];
"findBundle(Set,ResourceBundle)" [ color="#000000ff" shape="polygon" ];
"extractBaseName(String)" [ color="#000000ff" shape="polygon" ];
"isValidLanguageCode(String)" [ color="#000000ff" shape="polygon" ];
"checkFilesForConsistencyRegardingTheirKeys(SetMultimap,Set)" [ color="#000000ff" ];
"getMissingFileName(ResourceBundle,String)" [ color="#000000ff" shape="polygon" ];
}
"checkTranslationKeys(ResourceBundle)" [ color="#000000ff" ];
"groupFilesIntoBundles(Set,Pattern)" [ color="#000000ff" shape="polygon" ];
"finishProcessing()" [ color="#00ff00ff" shape="trapezium" ];
"setRequiredTranslations(String)" [ color="#00ff00ff" ];
"checkExistenceOfDefaultTranslation(ResourceBundle)" [ color="#000000ff" ];
"checkExistenceOfRequiredTranslations(ResourceBundle)" [ color="#000000ff" ];
"validateUserSpecifiedLanguageCodes(SortedSet)" [ color="#000000ff" ];
"getTranslationKeys(File)" [ color="#000000ff" ];
"checkTranslationKeys(ResourceBundle)" -> "getTranslationKeys(File)" [ label="5/120" ];
"checkTranslationKeys(ResourceBundle)" -> "checkFilesForConsistencyRegardingTheirKeys(SetMultimap,Set)" [ label="6/144" ];
"groupFilesIntoBundles(Set,Pattern)" -> "extractBaseName(String)" [ label="6/136" ];
"groupFilesIntoBundles(Set,Pattern)" -> "getPath(String)" [ label="7/167" ];
"groupFilesIntoBundles(Set,Pattern)" -> "findBundle(Set,ResourceBundle)" [ label="4/78" ];
"finishProcessing()" -> "groupFilesIntoBundles(Set,Pattern)" [ label="1/19" ];
"finishProcessing()" -> "checkExistenceOfDefaultTranslation(ResourceBundle)" [ label="2/47" ];
"finishProcessing()" -> "checkExistenceOfRequiredTranslations(ResourceBundle)" [ label="3/61" ];
"finishProcessing()" -> "checkTranslationKeys(ResourceBundle)" [ label="4/76" ];
"setRequiredTranslations(String)" -> "validateUserSpecifiedLanguageCodes(SortedSet)" [ label="1/10" ];
"checkExistenceOfDefaultTranslation(ResourceBundle)" -> "getMissingFileName(ResourceBundle,String)" [ label="4/72" ];
"checkExistenceOfDefaultTranslation(ResourceBundle)" -> "logMissingTranslation(String,String)" [ label="9/196" ];
"checkExistenceOfRequiredTranslations(ResourceBundle)" -> "getMissingFileName(ResourceBundle,String)" [ label="3/58" ];
"checkExistenceOfRequiredTranslations(ResourceBundle)" -> "logMissingTranslation(String,String)" [ label="8/182" ];
"validateUserSpecifiedLanguageCodes(SortedSet)" -> "isValidLanguageCode(String)" [ label="1/17" ];
"getTranslationKeys(File)" -> "logIoException(IOException,File)" [ label="3/60" ];
/*
Legend
Node border color:
    a) GREEN - public
    b) YELLOW - protected
    c) BLACK - private
    d) BLUE - default
Node shape:
    if static - rectangle
    otherwise if override - trapezium
    otherwise if overloaded - triangle
    otherwise ellipse

*/
}