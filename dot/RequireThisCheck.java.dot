digraph dependencies {
rankdir = "LR";
subgraph clustersimple {
"collectVariableDeclarations(DetailAST,AbstractFrame)" [ color="#ff0000ff" shape="polygon" ];
"endCollectingDeclarations(Queue,DetailAST)" [ color="#ff0000ff" ];
"getRightAssigmentOperand(DetailAST)" [ color="#ff0000ff" shape="polygon" ];
"canBeReferencedFromStaticContext(AbstractFrame,AbstractFrame)" [ color="#ff0000ff" shape="polygon" ];
"findFrame(DetailAST,boolean)" [ color="#ff0000ff" ];
"isDeclarationToken(int)" [ color="#ff0000ff" shape="polygon" ];
"isAssignToken(int)" [ color="#ff0000ff" shape="polygon" ];
"getNearestClassFrameName()" [ color="#ff0000ff" ];
"getAcceptableTokens()" [ color="#00ff00ff" shape="trapezium" ];
}
"collectDeclarations(Deque,DetailAST)" [ color="#ff0000ff" shape="polygon" ];
"checkField(DetailAST)" [ color="#ff0000ff" ];
"isOverlappingByMethodArgument(DetailAST)" [ color="#ff0000ff" ];
"isUseOfFieldInsideMethod(DetailAST)" [ color="#ff0000ff" ];
"isOverlappingByLocalVariable(DetailAST)" [ color="#ff0000ff" ];
"checkMethod(DetailAST)" [ color="#ff0000ff" ];
"getDefaultTokens()" [ color="#00ff00ff" shape="trapezium" ];
"getRequiredTokens()" [ color="#00ff00ff" shape="trapezium" ];
"beginTree(DetailAST)" [ color="#00ff00ff" shape="trapezium" ];
"visitToken(DetailAST)" [ color="#00ff00ff" shape="trapezium" ];
"processIdent(DetailAST)" [ color="#ff0000ff" ];
"logViolation(String,DetailAST,AbstractFrame)" [ color="#ff0000ff" ];
"processField(DetailAST,int)" [ color="#ff0000ff" ];
"collectDeclarations(Deque,DetailAST)" -> "collectVariableDeclarations(DetailAST,AbstractFrame)" [ label="0" ];
"checkField(DetailAST)" -> "isOverlappingByMethodArgument(DetailAST)" [ label="0" ];
"checkField(DetailAST)" -> "isOverlappingByLocalVariable(DetailAST)" [ label="4" ];
"checkField(DetailAST)" -> "findFrame(DetailAST,boolean)" [ label="6" ];
"isOverlappingByMethodArgument(DetailAST)" -> "getRightAssigmentOperand(DetailAST)" [ label="0" ];
"isOverlappingByMethodArgument(DetailAST)" -> "canBeReferencedFromStaticContext(AbstractFrame,AbstractFrame)" [ label="1" ];
"isOverlappingByMethodArgument(DetailAST)" -> "isUseOfFieldInsideMethod(DetailAST)" [ label="2" ];
"isOverlappingByMethodArgument(DetailAST)" -> "findFrame(DetailAST,boolean)" [ label="5" ];
"isOverlappingByMethodArgument(DetailAST)" -> "isAssignToken(int)" [ label="7" ];
"isUseOfFieldInsideMethod(DetailAST)" -> "canBeReferencedFromStaticContext(AbstractFrame,AbstractFrame)" [ label="0" ];
"isUseOfFieldInsideMethod(DetailAST)" -> "findFrame(DetailAST,boolean)" [ label="2" ];
"isOverlappingByLocalVariable(DetailAST)" -> "findFrame(DetailAST,boolean)" [ label="1" ];
"checkMethod(DetailAST)" -> "findFrame(DetailAST,boolean)" [ label="0" ];
"getDefaultTokens()" -> "getAcceptableTokens()" [ label="1" ];
"getRequiredTokens()" -> "getAcceptableTokens()" [ label="0" ];
"beginTree(DetailAST)" -> "collectDeclarations(Deque,DetailAST)" [ label="4" ];
"beginTree(DetailAST)" -> "endCollectingDeclarations(Queue,DetailAST)" [ label="6" ];
"visitToken(DetailAST)" -> "processIdent(DetailAST)" [ label="0" ];
"processIdent(DetailAST)" -> "checkMethod(DetailAST)" [ label="11" ];
"processIdent(DetailAST)" -> "logViolation(String,DetailAST,AbstractFrame)" [ label="0" ];
"processIdent(DetailAST)" -> "processField(DetailAST,int)" [ label="1" ];
"logViolation(String,DetailAST,AbstractFrame)" -> "getNearestClassFrameName()" [ label="14" ];
"processField(DetailAST,int)" -> "checkField(DetailAST)" [ label="3" ];
"processField(DetailAST,int)" -> "isDeclarationToken(int)" [ label="11" ];
}