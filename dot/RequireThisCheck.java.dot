digraph dependencies {
rankdir = "LR";
subgraph clustersimple {
"collectVariableDeclarations(DetailAST,AbstractFrame)" [ color="#000000ff" shape="polygon" ];
"endCollectingDeclarations(Queue,DetailAST)" [ color="#000000ff" ];
"findFrame(DetailAST,boolean)" [ color="#000000ff" ];
"isDeclarationToken(int)" [ color="#000000ff" shape="polygon" ];
"getNearestClassFrameName()" [ color="#000000ff" ];
"getAcceptableTokens()" [ color="#00ff00ff" shape="trapezium" ];
}
"checkField(DetailAST)" [ color="#000000ff" ];
"checkMethod(DetailAST)" [ color="#000000ff" ];
"getDefaultTokens()" [ color="#00ff00ff" shape="trapezium" ];
"getRequiredTokens()" [ color="#00ff00ff" shape="trapezium" ];
"beginTree(DetailAST)" [ color="#00ff00ff" shape="trapezium" ];
"visitToken(DetailAST)" [ color="#00ff00ff" shape="trapezium" ];
"processIdent(DetailAST)" [ color="#000000ff" ];
"logViolation(String,DetailAST,AbstractFrame)" [ color="#000000ff" ];
"processField(DetailAST,int)" [ color="#000000ff" ];
"collectDeclarations(Deque,DetailAST)" [ color="#000000ff" shape="polygon" ];
"checkField(DetailAST)" -> "findFrame(DetailAST,boolean)" [ label="2/31" ];
"checkMethod(DetailAST)" -> "findFrame(DetailAST,boolean)" [ label="1/16" ];
"getDefaultTokens()" -> "getAcceptableTokens()" [ label="2/10" ];
"getRequiredTokens()" -> "getAcceptableTokens()" [ label="1/5" ];
"beginTree(DetailAST)" -> "endCollectingDeclarations(Queue,DetailAST)" [ label="7/191" ];
"beginTree(DetailAST)" -> "collectDeclarations(Deque,DetailAST)" [ label="5/119" ];
"visitToken(DetailAST)" -> "processIdent(DetailAST)" [ label="1/26" ];
"processIdent(DetailAST)" -> "checkMethod(DetailAST)" [ label="7/181" ];
"processIdent(DetailAST)" -> "logViolation(String,DetailAST,AbstractFrame)" [ label="1/34" ];
"processIdent(DetailAST)" -> "processField(DetailAST,int)" [ label="2/49" ];
"logViolation(String,DetailAST,AbstractFrame)" -> "getNearestClassFrameName()" [ label="9/185" ];
"processField(DetailAST,int)" -> "checkField(DetailAST)" [ label="4/117" ];
"processField(DetailAST,int)" -> "isDeclarationToken(int)" [ label="7/162" ];
"collectDeclarations(Deque,DetailAST)" -> "collectVariableDeclarations(DetailAST,AbstractFrame)" [ label="1/48" ];
/*
Legend
Node border color:
    a) GREEN - public
    b) YELLOW - protected
    c) BLACK - private
    d) BLUE - default
Node shape:
    if static - rectangle
    otherwise if override - trapezium
    otherwise if overloaded - triangle
    otherwise ellipse

*/
}